---
- name: Provision EngineBlock
  hosts: engine
  remote_user: "{{ remote_user }}"

  vars:
    # General vars, note that these should be moved to a parent playbook in future versions
    # Note that ordering matters here!
    temp_dir: "/tmp"
    logging_dir: "/var/log/openconext"
    releases_dir: "/opt/openconext"
    builds_dir: "{{ releases_dir }}/builds"

    # Engine specific variables
    engine_version_dir: "{{ engine_version | replace('/', '-') }}"
    engine_release_dir: "{{ releases_dir }}/OpenConext-engineblock-{{ engine_version_dir }}"
    engine_build_path: "{{ builds_dir }}/OpenConext-engineblock-{{ engine_version_dir }}.tar.gz"
    engine_download_url: "https://github.com/OpenConext/OpenConext-engineblock/releases/download/{{ engine_version }}/OpenConext-engineblock-{{ engine_version_dir }}.tar.gz"
    engine_current_release_symlink: "/opt/www/engineblock"

    engine_config:
      auth.simplesamlphp.idp.certificate : /etc/surfconext/engineblock.default.pem
      auth.simplesamlphp.idp.location : "https://engine.{{ openconext_domain }}/authentication/idp/single-sign-on"
      auth.simplesamlphp.idp.entityId : "https://engine.{{ openconext_domain }}/authentication/idp/metadata"
      cookie.lang.domain : "{{ openconext_domain }}"
      cookie.lang.expiry : "60*60*24*60"
      database.master1.user : "{{ engine_db_user }}"
      database.master1.dsn : "mysql:host:{{ engine_db_host }};dbname:{{ engine_db_name }}"
      database.master1.password : "{{ engine_db_password }}"
      database.masters[] : "master1"
      database.slaves[] : "master1"
      dynamicAssets : true
      email.sendWelcomeMail : 0
      encryption.keys.default.privateFile : /etc/surfconext/engineblock.key
      encryption.keys.default.publicFile : /etc/surfconext/engineblock.crt
      ldap.accountDomainName : "surfconext.nl"
      ldap.baseDn : "dc:surfconext,dc:nl"
      ldap.host : "ldap.{{ openconext_domain }}"
      ldap.useSsl : 0
      ldap.userName : "{{ engine_ldap_binddn }}"
      ldap.password : "{{ engine_ldap_password }}"
      logs.file.writername : "Stream"
      logs.file.writerparams.stream : "/var/log/surfconext/engineblock.log"
      serviceRegistry.location : "{{ serviceregistry_url }}"
      serviceRegistry.user : "{{ serviceregistry_user }}"
      serviceRegistry.user_secret : "{{ serviceregistry_secret }}"

  tasks:
  - name: Make sure a database exists
    mysql_db:
      state:          present
      name:           "{{ engine_db_name }}"
      login_host:     "{{ engine_db_host }}"
      login_port:     "{{ engine_db_port }}"
      login_user:     "{{ db_admin_user }}"
      login_password: "{{ db_admin_password }}"
      encoding:       utf8
      collation:      utf8_unicode_ci
    register: engine_db_install

  - name: Make sure a user exists
    mysql_user:
      state:          present
      name:           "{{ engine_db_user }}"
      password:       "{{ engine_db_password }}"
      priv:           "{{ engine_db_name }}.*:ALL"
      login_host:     "{{ engine_db_host }}"
      login_port:     "{{ engine_db_port}}"
      login_user:     "{{ db_admin_user }}"
      login_password: "{{ db_admin_password}}"

  - name: Write out SQL file with proper domain
    template: src=../../data/engineblock.sql.j2 dest=/tmp/domain.engineblock.sql
    when: engine_db_install.changed

  - name: Install initial Database schema when a new database was created
    mysql_db:
      name:           "{{ engine_db_name }}"
      login_host:     "{{ engine_db_host }}"
      login_port:     "{{ engine_db_port}}"
      login_user:     "{{ engine_db_user }}"
      login_password: "{{ engine_db_password}}"
      state: import
      target: /tmp/domain.engineblock.sql
    when: engine_db_install.changed

#  - name: Make sure LDAP database exists

  - name: Ensure the directories exists
    file: path={{ item }} state=directory
    with_items:
    - "{{ releases_dir }}"
    - "{{ builds_dir }}"

  - name: Install Engine from Build (only when version starts with a number)
    include: install-engine.yml
    when: engine_version | match("^[0-9]")

  - name: Install Engine from source (only when version does not start with a number)
    include: install-engine-src.yml
    when: engine_version | match("^[^0-9]")

  - name: Migrate the configuration file
    command: "{{ engine_release_dir }}/bin/migrate_etc.php"

  - name: Install migrated configuration file
    command: install -b /etc/surfconext/engineblock.ini.new /etc/surfconext/engineblock.ini

  - name: Detect default certificates.
    stat: path=/etc/openconext/engineblock.key
    register: default_cert

  - name: Generate new default certificate if none was found.
    command: openssl req -subj '/CN=Engine/OU=Services/O=OpenConext/C=NL/' -newkey rsa:2048 -new -x509 -days 3652 -nodes -out engineblock.crt -keyout engineblock.key
    args:
      chdir: /etc/openconext
    when: default_cert.stat.exists == false

  - name: Set configuration
    ini_file:
      dest: /etc/openconext/engineblock.ini
      section: "local"
      option: "{{ item.key }}"
      value: "{{ item.value }}"
    with_dict: engine_config

  - name: Update LDAP
    command: ldapmodify -x -D "{{ admin_ldap_binddn }}" -h localhost -w "{{ admin_ldap password }}" -f {{ item }}
    with_items:
      - "{{ engine_release_dir }}/ldap/changes/addDeprovisionWarningSentAttributes.ldif"
      - "{{ engine_release_dir }}/ldap/changes/addCollabPersonUUID.ldif"
    ignore_errors: true

  - name: Run EngineBlock migrations
    command: ./bin/migrate
    args:
      chdir: "{{ engine_release_dir }}"

  - name: Activate new EngineBlock
    file: src={{ engine_release_dir }} dest={{ engine_current_release_symlink }} state=link